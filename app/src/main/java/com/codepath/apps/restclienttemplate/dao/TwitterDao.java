package com.codepath.apps.restclienttemplate.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.codepath.apps.restclienttemplate.dao.Twitter;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TWITTER.
*/
public class TwitterDao extends AbstractDao<Twitter, Long> {

    public static final String TABLENAME = "TWITTER";

    /**
     * Properties of entity Twitter.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property InternalId = new Property(0, Long.class, "internalId", true, "INTERNAL_ID");
        public final static Property Id = new Property(1, Long.class, "id", false, "ID");
        public final static Property Created_at = new Property(2, java.util.Date.class, "created_at", false, "CREATED_AT");
        public final static Property Retweet_count = new Property(3, Long.class, "retweet_count", false, "RETWEET_COUNT");
        public final static Property Favorite_count = new Property(4, Long.class, "favorite_count", false, "FAVORITE_COUNT");
        public final static Property Text = new Property(5, String.class, "text", false, "TEXT");
        public final static Property TwitterUserIdMapping = new Property(6, Long.class, "twitterUserIdMapping", false, "TWITTER_USER_ID_MAPPING");
        public final static Property In_reply_to_user_id = new Property(7, Long.class, "in_reply_to_user_id", false, "IN_REPLY_TO_USER_ID");
    };

    private DaoSession daoSession;

    private Query<Twitter> twitter_TwitterListQuery;

    public TwitterDao(DaoConfig config) {
        super(config);
    }
    
    public TwitterDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TWITTER' (" + //
                "'INTERNAL_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: internalId
                "'ID' INTEGER," + // 1: id
                "'CREATED_AT' INTEGER," + // 2: created_at
                "'RETWEET_COUNT' INTEGER," + // 3: retweet_count
                "'FAVORITE_COUNT' INTEGER," + // 4: favorite_count
                "'TEXT' TEXT," + // 5: text
                "'TWITTER_USER_ID_MAPPING' INTEGER," + // 6: twitterUserIdMapping
                "'IN_REPLY_TO_USER_ID' INTEGER);"); // 7: in_reply_to_user_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TWITTER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Twitter entity) {
        stmt.clearBindings();
 
        Long internalId = entity.getInternalId();
        if (internalId != null) {
            stmt.bindLong(1, internalId);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        java.util.Date created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindLong(3, created_at.getTime());
        }
 
        Long retweet_count = entity.getRetweet_count();
        if (retweet_count != null) {
            stmt.bindLong(4, retweet_count);
        }
 
        Long favorite_count = entity.getFavorite_count();
        if (favorite_count != null) {
            stmt.bindLong(5, favorite_count);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(6, text);
        }
 
        Long twitterUserIdMapping = entity.getTwitterUserIdMapping();
        if (twitterUserIdMapping != null) {
            stmt.bindLong(7, twitterUserIdMapping);
        }
 
        Long in_reply_to_user_id = entity.getIn_reply_to_user_id();
        if (in_reply_to_user_id != null) {
            stmt.bindLong(8, in_reply_to_user_id);
        }
    }

    @Override
    protected void attachEntity(Twitter entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Twitter readEntity(Cursor cursor, int offset) {
        Twitter entity = new Twitter( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // internalId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // created_at
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // retweet_count
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // favorite_count
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // text
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // twitterUserIdMapping
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // in_reply_to_user_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Twitter entity, int offset) {
        entity.setInternalId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCreated_at(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setRetweet_count(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setFavorite_count(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setText(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTwitterUserIdMapping(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setIn_reply_to_user_id(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Twitter entity, long rowId) {
        entity.setInternalId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Twitter entity) {
        if(entity != null) {
            return entity.getInternalId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "twitterList" to-many relationship of Twitter. */
    public List<Twitter> _queryTwitter_TwitterList(Long in_reply_to_user_id) {
        synchronized (this) {
            if (twitter_TwitterListQuery == null) {
                QueryBuilder<Twitter> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.In_reply_to_user_id.eq(null));
                twitter_TwitterListQuery = queryBuilder.build();
            }
        }
        Query<Twitter> query = twitter_TwitterListQuery.forCurrentThread();
        query.setParameter(0, in_reply_to_user_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserDao().getAllColumns());
            builder.append(" FROM TWITTER T");
            builder.append(" LEFT JOIN USER T0 ON T.'TWITTER_USER_ID_MAPPING'=T0.'INTERNAL_ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Twitter loadCurrentDeep(Cursor cursor, boolean lock) {
        Twitter entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        User user = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
        entity.setUser(user);

        return entity;    
    }

    public Twitter loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Twitter> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Twitter> list = new ArrayList<Twitter>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Twitter> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Twitter> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
